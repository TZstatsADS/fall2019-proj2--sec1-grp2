}
MultinomialEM <- function(H, K, tau) {
## Initialization
# Generate a random vector of K indices to choose from the histograms as initial centroids
init = sample(1:nrow(H), size = K, replace = F)
# Select chosen histograms as centroid, a k-by-d matrix
centroid = H[init, ]
# To avoid taking log of zero, add a small constant to the centroids where bin is empty
centroid = ifelse(centroid == 0, 0.01, centroid)
# Initialize the measure of assignment threshold to be Inf
delta = Inf
# Initialize assignment probabilities matrix, n-by-k
A = matrix(0, nrow(H), K)
# Initialize centroid parameters matrix, n-by-k
phi = matrix(0, nrow(H), K)
# Arbitrarily initialize relative cluster size c, a vector of length K
c = rep(1 / K, length.out = K)
# Initialize an intermediate matrix b to update the t matrix
b = matrix(0, K, ncol(H))
# Initialize a hard assignment vector of length n
m = rep(0, length.out = nrow(H))
# Use a while loop to implement the iteration and keep track of matrix A from previous step
while (delta >= tau) {
A_old = A
## E-step
phi = exp(H %*% t(log(centroid)))
A = t(c * t(phi)) / rowSums(t(c * t(phi)))
## M-step
c = colSums(A)
b = t(A) %*% H
centroid = b / rowSums(b)
## Measurement of iteration
delta = norm(A - A_old, type = "O")
}
## Reparameterization
m <- apply(A, 1, FUN = which.max)
return(m)
}
MultinomialEM <- function(H, K, tau) {
init = sample(1:nrow(H), size = K, replace = F)
centroid = H[init, ]
centroid = ifelse(centroid == 0, 0.01, centroid)
delta = Inf
A = matrix(0, nrow(H), K)
phi = matrix(0, nrow(H), K)
c = rep(1 / K, length.out = K)
b = matrix(0, K, ncol(H))
m = rep(0, length.out = nrow(H))
while (delta >= tau) {
A_old = A
## E-step
phi = exp(H %*% t(log(centroid)))
A = t(c * t(phi)) / rowSums(t(c * t(phi)))
## M-step
c = colSums(A)
b = t(A) %*% H
centroid = b / rowSums(b)
## Measurement of iteration
delta = norm(A - A_old, type = "O")
}
m <- apply(A, 1, FUN = which.max)
return(m)
}
em_1 <- MultinomialEM(H, 3, 0.1)
em_2 <- MultinomialEM(H, 4, 0.1)
em_3 <- MultinomialEM(H, 5, 0.1)
# Reset the histograms into their original "position" in the image, then visualize the result matrix in grayscale to represent the clustering
hist_1 <- matrix(em_1, 200, 200)
hist_2 <- matrix(em_2, 200, 200)
hist_3 <- matrix(em_3, 200, 200)
image(hist_1, col = gray((3:8) / 8), axes = FALSE)
em_1 <- MultinomialEM(H, 3, 0.1)
em_2 <- MultinomialEM(H, 4, 0.1)
em_3 <- MultinomialEM(H, 5, 0.1)
# Reset the histograms into their original "position" in the image, then visualize the result matrix in grayscale to represent the clustering
hist_1 <- matrix(em_1, 200, 200)
hist_2 <- matrix(em_2, 200, 200)
hist_3 <- matrix(em_3, 200, 200)
shiny::runApp('C:/Users/xil14/Desktop/Zora/Graphen/Daily Report/05-30-2019/Shiny-Interface/Index-Clustering')
knitr::opts_chunk$set(echo = TRUE)
library(nowcasting)
dta = NYFED$base
trans = NYFED$legend
for()
library(nowcasting)
data(NYFED)
base <- NYFED$base
blocks <- NYFED$blocks$blocks
trans <- NYFED$legend$Transformation
frequency <- NYFED$legend$Frequency
data <- Bpanel(base = base, trans=trans, NA.replace = F, na.prop = 1)
nowEM <- nowcast(formula = GDPC1 ~., data = data, r = 1, p = 1, method = 'EM', blocks = blocks, frequency = frequency)
nowEM
nowEM$yfcst
tail(y_cast)
y_cast <-nowEM$yfcst
tail(y_cast)
x_cast <- nowEM$xfcst
tail(x_cast)
data
tail(data)
data
View(data)
type(data)
typeof(data)
rownames(data)
data2 = data.frame(data)
rownames(data2)
data2
data
?data
data
tail(y_cast)
y_cast
res <- nowEM$Res
res
res$FF
tails(res$FF)
res <- nowEM$Res
tail(res$FF)
res$x_sm
nowEM
data
data[-1:-4,]
nowcast.plot(nowEM)
nowEM
trans
NYFED
?rnomm
?rnorm
c = 0
for n in seq(1000):
ma = mean(rnorm(25,4.7,0.5))
mb = mean(rnorm(49,4,0.7))
if (ma>= mb+1)
c = c+1
seq(1000)
for seq(1000):
ma = mean(rnorm(25,4.7,0.5))
c = 0
for seq(1000):
ma = mean(rnorm(25,4.7,0.5))
mb = mean(rnorm(49,4,0.7))
if (ma>= mb+1)
c = c+1
c = 0
for (n in 1:1000){
ma = mean(rnorm(25,4.7,0.5))
mb = mean(rnorm(49,4,0.7))
if (ma>= mb+1)
c = c+1
}
c
c = 0
for (n in 1:10000){
ma = mean(rnorm(25,4.7,0.5))
mb = mean(rnorm(49,4,0.7))
if (ma>= mb+1)
c = c+1
}
c
170/10000
c = 0
for (n in 1:100000){
ma = mean(rnorm(25,4.7,0.5))
mb = mean(rnorm(49,4,0.7))
if (ma>= mb+1)
c = c+1
}
c
c = 0
for (n in 1:10000000){
ma = mean(rnorm(25,4.7,0.5))
mb = mean(rnorm(49,4,0.7))
if (ma>= mb+1)
c = c+1
}
c = 0
for (n in 1:100000){
ma = mean(rnorm(25,4.7,0.5))
mb = mean(rnorm(49,4,0.7))
if (ma>= mb+1)
c = c+1
}
c
24
25
c = 0
for (n in 1:100000){
ma = mean(rnorm(25,4.7,0.5))
mb = mean(rnorm(49,4,0.7))
if (ma>= mb+1)
c = c+1
}
c = 0
nsim = 100000
for (n in 1:nsim){
ma = mean(rnorm(25,4.7,0.5))
mb = mean(rnorm(49,4,0.7))
if (ma>= mb+1)
c = c+1
}
c/nsim
c = 0
nsim = 100000
for (n in 1:nsim){
ma = mean(rnorm(25,4.7,0.5))
mb = mean(rnorm(49,4,0.7))
if (ma>= mb+1)
c = c+1
}
(c/nsim)*100
a = c(1,2,3,4)
as.matrix(a
)
matrix(a, 2,2,)
index(a)
?index
V = c(1,2,3,4,5,6,7,10)
V[which.min(lapply(V, function(x) x^2))]
V[which.min(lapply(V, function(x) x^3))]
V[which.min(sapply(V, function(x) x^3))]
V[which.min(unlist(V, function(x) x))]
V[which.min(unlist(lapply(V, function(x) x)))]
V = c(2,4,1,5,1,2,3,4,1,2,35,6,2,3,1)
V[which.min(unlist(lapply(V, function(x) x)))]
V[which.min(unlist(lapply(V, function(x) x)))]
V[which.min(unlist(lapply(V, function(x) x)))]
?unlist
knitr::opts_chunk$set(echo = TRUE)
fit <- lm(medv ~ crim + zn + indus + nox + rm + age + tax, data = Boston)
library(MASS)
library(car)
fit <- lm(medv ~ crim + zn + indus + nox + rm + age + tax, data = Boston)
summary(fit)
plot(Boston$crim,Boston$medv)
plot(Boston$crim,Boston$medv, x_label = "Per Capita Crime Rate by Town")
plot(Boston$crim,Boston$medv, x_lab = "Per Capita Crime Rate by Town")
?plot
plot(Boston$crim,Boston$medv, xlab = "Per Capita Crime Rate by Town")
plot(Boston$crim,Boston$medv, xlab = "Per Capita Crime Rate by Town", ylab = "Median Income of Owner Occupied Homes in $1000s")
par(mfrow=c(2,4))
plot(Boston$crim,Boston$medv)
plot(Boston$zn,Boston$medv)
plot(Boston$indus,Boston$medv)
plot(Boston$nox,Boston$medv)
plot(Boston$rm,Boston$medv)
plot(Boston$age,Boston$medv)
plot(Boston$tax,Boston$medv)
plot(fit)
plot(fit)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,2))
plot(fit)
durbinWatsonTest(fit)
durbinWatsonTest(fit)
cor.test(fit)
durbinWatsonTest(fit)
par(mfrow=c(2,4))
plot(Boston$crim,Boston$medv)
plot(Boston$zn,Boston$medv)
plot(Boston$indus,Boston$medv)
plot(Boston$nox,Boston$medv)
plot(Boston$rm,Boston$medv)
plot(Boston$age,Boston$medv)
plot(Boston$tax,Boston$medv)
fit_q3 <- lmsreg(medv~crim+zn+indus+nox+rm+age+tax, data = Boston)
fit2_q3
fit_q3 <- lmsreg(medv~crim+zn+indus+nox+rm+age+tax, data = Boston)
fit_q3
shiny::runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/lib')
install.packages("leaflet")
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/lib')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/lib')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/lib')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/lib')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/lib')
data
library(shiny)
library(leaflet)
library(dplyr)
df_2015 <- readRDS("../data/sample_data_2015.rds")
df_2005 <- readRDS("../data/sample_data_2005.rds")
df_1995 <- readRDS("../data/sample_data_1995.rds")
df_2015.head()
head(df_2015)
unique(df_2015$status)
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/lib')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/lib')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/lib')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/lib')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/lib')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/lib')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/lib')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
paste("../data/",input$year,".rds"))
paste("../data/","sample",".rds"))
paste("../data/","sample",".rds")
paste("../data/","sample",".rds", sep = "")
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
runApp('C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp')
filtered = readRDS(paste("../data/","sample_data_2015",".rds",sep=""))
filtered = readRDS(paste("../data/","sample_data_2015",".rds",sep=""))
paste("../data/","sample_data_2015",".rds",sep="")
filtered = readRDS(paste("../data/","sample_data_2015",".rds",sep=""))
getwd()
setwd("C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp")
setwd("C:/Users/xil14/Desktop/Zora/Advanced Data Science/fall2019-proj2--sec1-grp2/shiny_app/TreeApp")
filtered = readRDS(paste("../data/","sample_data_2015",".rds",sep=""))
Health_Icon <- function(data){
if(data$status == "Alive"){
type = green
} else if (data$status == "Stump"){
type = orange
} else if (data$status == "Dead"){
type = red
}
return(type)
}
Health_Icon(filtered)
Health_Icon <- function(data){
sapply(data$type, function(data$status){
if(data$status == "Alive"){
type = green
} else if (data$status == "Stump"){
type = orange
} else if (data$status == "Dead"){
type = red
}})
}
Health_Icon <- function(data){
status = data$status
sapply(data$type, function(status){
if(data$status == "Alive"){
type = green
} else if (data$status == "Stump"){
type = orange
} else if (data$status == "Dead"){
type = red
}})}
Health_Icon <- function(data){
status = data$status
sapply(data$type, function(status){
if(data$status == "Alive"){
type = green
} else if (data$status == "Stump"){
type = orange
} else if (data$status == "Dead"){
type = red
}})}
Health_Icon(filtered)
filtered
filtered$health
unique(filtered$health)
runApp()
Health_Icon <- function(data){
status = data$status
sapply(data$type, function(status){
if(data$status == "Alive"){
type = green
} else if (data$status == "Stump"){
type = orange
} else if (data$status == "Dead"){
type = red
}})}
Health_Icon(filtered)
Health_Icon <- function(data){
health = data$health
sapply(data$health, function(health){
if(data$status == "Good"){
type = green
} else if (data$status == "Fair"){
type = orange
} else if (data$status == "Poor"){
type = red
}})}
Health_Icon(filtered)
runApp()
Health_Icon <- function(data){
health = data$health
match_icon = function(health){
if(data$status == "Good"){
type = green
} else if (data$status == "Fair"){
type = orange
} else if (data$status == "Poor"){
type = red
}}
type = factor(match_icon(health))
return(type)}
Health_Icon(filtered)
df <- sp::SpatialPointsDataFrame(
cbind(
(runif(20) - .5) * 10 - 90.620130,  # lng
(runif(20) - .5) * 3.8 + 25.638077  # lat
),
data.frame(type = factor(
ifelse(runif(20) > 0.75, "pirate", "ship"),
c("ship", "pirate")
))
)
df
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
is.null(filtered$status)
sum(filtered$status==NULL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
filtered
filtered$spc_common
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
filtered
filtered$health
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df_2005 <- readRDS("../data/sample_data_2005.rds")
df_2005
runApp()
runApp()
