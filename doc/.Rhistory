m <- leaflet() %>%
addProviderTiles("CartoDB.positron") %>%
setView(lat = NYC_coord$lat, lng = NYC_coord$lon, zoom = 10) %>%
addCircles(lng = a$long, lat = a$lat, color = pal(a$measure), radius = 2, opacity = 0.1)
m
pal <- colorNumeric(palette = colorRampPalette(c("green", "red"))(10),
domain = a$measure)
#NYC_coord <- geocode("New York City")
m <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = NYC_coord$lat, lng = NYC_coord$lon, zoom = 10) %>%
addCircles(lng = a$long, lat = a$lat, color = pal(a$measure), radius = 2, opacity = 0.1)
m
pal <- colorNumeric(palette = colorRampPalette(c("green", "red"))(10),
domain = a$measure)
#NYC_coord <- geocode("New York City")
m <- leaflet() %>%
addProviderTiles("CartoDB.Voyager") %>%
setView(lat = NYC_coord$lat, lng = NYC_coord$lon, zoom = 10) %>%
addCircles(lng = a$long, lat = a$lat, color = pal(a$measure), radius = 2, opacity = 0.1)
m
pal <- colorNumeric(palette = colorRampPalette(c("green", "red"))(10),
domain = a$measure)
#NYC_coord <- geocode("New York City")
m <- leaflet() %>%
addProviderTiles("Wikimedia") %>%
setView(lat = NYC_coord$lat, lng = NYC_coord$lon, zoom = 10) %>%
addCircles(lng = a$long, lat = a$lat, color = pal(a$measure), radius = 2, opacity = 0.1)
m
pal <- colorNumeric(palette = colorRampPalette(c("green", "red"))(10),
domain = a$measure)
#NYC_coord <- geocode("New York City")
m <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = NYC_coord$lat, lng = NYC_coord$lon, zoom = 10) %>%
addCircles(lng = a$long, lat = a$lat, color = pal(a$measure), radius = 2, opacity = 0.1)
m
choices = c("PM2.5" = "pm", "Nitrogen Dioxide (NO2)" = "no2",
"Nitric Oxide (NO)" = "no", "Black Carbon" = "bc")
choices
#NYC_coord <- geocode("New York City")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = NYC_coord$lat, lng = NYC_coord$lon, zoom = 10) %>%
addCircles(lng = a$long, lat = a$lat, color = pal(a$measure), radius = 2, opacity = 0.1)
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
View(NYC_coord)
View(NYC_coord)
NYC_coord <- c(lon = -74.00597, lat = 40.71278)
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp()
runApp()
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp()
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp()
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
load("../../data/pollution.RData")
load("../data/pollution.RData")
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
getwd()
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
rm(list = ls())
load("../../data/pollution.RData")
load("../data/pollution.RData")
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app')
install.packages("shinyWidgets")
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app')
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
Boston
install.packages("pls")
library("pls")
?choose
?filter
X <- Boston %>%
select(crim, zn, indus, nox, rm, age, tax)
X <- Boston %>%
select("crim", "zn", "indus", "nox", "rm", "age", "tax")
X <- Boston %>%
select("crim", "zn", "indus", "nox", "rm", "age", "tax")
X <- Boston %>%
select(crim, zn, indus, nox, rm, age, tax)
X <- Boston %>%
select(crim, zn, indus, nox, rm, age, tax)
X <- Boston %>%
select(crim, zn, indus, nox, rm, age, tax)
X <- Boston %>%
select(crim, zn, indus, nox, rm, age, tax)
X <- Boston %>%
select(crim, zn, indus, nox, rm, age, tax)
X <- Boston %>%
select(crim, zn, indus, nox, rm, age, tax)
aa <- Boston
X <- aa %>%
select(crim, zn, indus, nox, rm, age, tax)
flight
aa <- Boston
X <- aa %>%
select(crim, zn, indus, nox, rm, age, tax)
aa <- Boston
X <- aa %>%
select(crim, zn, indus, nox, rm, age, tax)
aa <- Boston
X <- select(aa, crim, zn)
library(dplyr)
aa <- Boston
X <- select(aa, crim, zn)
aa <- Boston
X <- select(aa, crim, zn)
aa <- Boston
X <- select(aa, crim, zn)
X <- Boston %>%
dplyr::select(crim, zn, indus, nox, rm, age, tax)
Rxx <- cor(X)
View(Rxx)
eigen(Rxx)
X <- Boston %>%
dplyr::select(crim, zn, indus, nox, rm, age, tax)
Rxx <- cor(X)
cond_num <- max(eigen(Rxx)$values) / min(eigen(Rxx)$value)
cond_num
library(pls)
library(pls)
linear_reg <- lm(medv ~ crim+zn+indus+nox+rm+age+tax, data = Boston)
pc_reg <- pcr(medv ~ crim+zn+indus+nox+rm+age+tax, data = Boston)
summary(pc_reg)
pc_reg$loadings
pc_reg$coefficients
pc_reg$scores
pc_reg$method
library(pls)
linear_reg <- lm(medv ~ crim+zn+indus+nox+rm+age+tax, data = Boston)
pc_reg <- pcr(medv ~ crim+zn+indus+nox+rm+age+tax, data = Boston)
plot(x = 1:nrow(Boston), y = Boston$medv)
library(pls)
linear_reg <- lm(medv ~ crim+zn+indus+nox+rm+age+tax, data = Boston)
pc_reg <- pcr(medv ~ crim+zn+indus+nox+rm+age+tax, data = Boston)
plot(x = 1:nrow(Boston), y = Boston$medv)
lines(x = 1:nrow(Boston), y = linear_reg$fitted.values, col = "red")
lines(x = 1:nrow(Boston), y = pc_reg$fitted.values, col = "blue")
pc_reg$fitted.values
a <- pc_reg$fitted.values
a[1,2,4]
a[1,1,4]
pc_reg$Yloadings
pc_reg$Xmeans
pc_reg$residuals
head(a)
head(a, 5)
head(a, 20)
a <- predict.mvr(pc_reg)
a <- predict(pc_reg)
a <- predict(pc_reg)
aa <- predict(pc_reg)
aa <- predict(pc_reg, type = "response")
aa <- predict(pc_reg, type = "score")
plot(pc_reg)
plot(pc_reg, plottype = "loadings")
b <- princomp(x = X)
b$loadings
pc_reg$loadings
eigen(t(X)%*%X)
eigen(t(X) %*% X)
a <- t(X) %*% X
t(X)
aa = t(X)
X
t(X) %*% X
t(X) %*% as.matrix(X)
ee <- eigen(t(X) %*% as.matrix(X))
ee$values
ee$vectors
ee$vectors %*% t(ee$vectors)
t(ee$vectors) %*% ee$vectors
P <- ee$vectors
D <- diag(ee$values)
sqrt(D) %*% P
pc_reg$loadings
b$loadings
ee$vectors
pc_reg$coefficients
b$scores
pc_reg$scores
pc_reg$scores
diag(ee$values) %*% t(ee$vectors)
diag(ee$values) %*% (ee$vectors)
pc_reg$projection
pc_reg$loadings
library(pls)
linear_reg <- lm(medv ~ crim+zn+indus+nox+rm+age+tax, data = Boston)
pc_reg <- pcr(medv ~ crim+zn+indus+nox+rm+age+tax, data = Boston)
pc_reg$loadings
pc_reg$model
pc_reg$scores
pc_reg$coefficients
pc_reg$Xvar
pc_reg$Xtotvar
pc_reg$coefficients
b$loadings
pc_reg$fitted.values
b$scores
pc_reg$fit.time
pc_reg$coefficients
pc_reg$scores
pc_reg$loadings
pc_reg$Yloadings
pc_reg$projection
pc_reg$fitted.values
pc_reg$Xvar
pc_reg$Xvar / sum(pc_reg$Xvar)
pc_reg$Xvar / sum(pc_reg$Xvar)
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/lib/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/app')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/lib/pol')
head(pc_reg$scores %*% pc_reg$loadings)
pc_reg$scores
pc_reg$coefficients
coef(lm(Boston$medv ~ pc_reg$loadings[,1]))
pc_reg$loadings[,1]
pc_reg$loadings
coef(lm(Boston$medv ~ pc_reg$scores[,1]))
pc_reg$scores
first_pc <- pc_reg$scores[,1]
PCr <- lm(Boston$medv ~ first_pc)
PCr$fitted.values
pc_reg$fitted.values
plot(1:nrow(Boston), Boston$medv)
lines(1:nrow(Boston), linear_reg$fitted.values, col = "red")
lines(1:nrow(Boston), pc_reg$fitted.values[,1], col = "blue")
pc_reg$fitted.values
a <- pc_reg$fitted.values
plot(1:nrow(Boston), Boston$medv)
lines(1:nrow(Boston), linear_reg$fitted.values, col = "red")
lines(1:nrow(Boston), pc_reg$fitted.values[ , , 1], col = "blue")
legend("topright", legend = c("Linear Regression", "Principal Component Regression"),
lty = 1, col = c("red", "blue"))
a <- pc_reg$fitted.values
plot(1:nrow(Boston), Boston$medv, xlab = "")
lines(1:nrow(Boston), linear_reg$fitted.values, col = "red")
lines(1:nrow(Boston), pc_reg$fitted.values[ , , 1], col = "blue")
legend("topright", legend = c("Linear Regression", "Principal Component Regression"),
lty = 1, col = c("red", "blue"))
a <- pc_reg$fitted.values
install.packages("glmnet")
library(glmnet)
library(glmnet)
# Lasso
lasso <- glmnet(X, Boston$medv, family = "gaussian", alpha = 1)
X
library(glmnet)
# Lasso
lasso <- glmnet(as.data.frame(X), Boston$medv, family = "gaussian", alpha = 1)
library(glmnet)
# Lasso
lasso <- glmnet(as.matrix(X), Boston$medv, family = "gaussian", alpha = 1)
library(glmnet)
# Lasso
lasso <- glmnet(as.matrix(X), Boston$medv, family = "gaussian", alpha = 1)
plot(lasso)
coef(lasso)
print(lasso)
coef(lasso)
a <- coef(lasso)
a@p
coef(lasso)
coef(lasso, s = 1)
# Stepwise
stepwise <- step(linear_reg, direction = "both")
# Stepwise
stepwise <- step(linear_reg, direction = "forward")
# Stepwise
stepwise <- step(linear_reg, direction = "both")
stepwise$anova
a <- step(lm(medv ~ 1, data = Boston), scope = ~., direction = "forward")
a
a <- step(lm(medv ~ 1, data = Boston), scope = ~., direction = "both")
# Stepwise
stepwise <- step(linear_reg, direction = "both")
# Stepwise
stepwise <- step(linear_reg, direction = "both", trace = F)
stepwise$coefficients
stepwise$model
stepwise$anova
library(glmnet)
# Lasso
lasso <- glmnet(as.matrix(X), Boston$medv, family = "gaussian", alpha = 1)
coef(lasso, s = 1)
# Stepwise
stepwise <- step(linear_reg, direction = "both", trace = F)
stepwise$anova
stepwise$coefficients
coef(lasso, s = 1)
library(knitr)
<- c(3, 2, 1, 3, 1)
c1 <- c(3, 2, 1, 3, 1)
c2 <- c(3, 1, 2, 3, 1)
c3 <- c(1, 1, 2, 1, 2)
c4 <- c(2, 1, 2, 2, 2)
df <- data.frame("OLS" = c1, "Ridge" = c2, "Lasso" = c3, "Elastic Net" = c4,
row.names = c("Performance when p>>n", "Performance under multicolliearity",
"Unbiased estimators", "Model selection capability",
"Simplicity: Computation, Inference, Interpretation"))
install.packages("geojsonR")
knitr::opts_chunk$set(echo = TRUE)
library(geojsonR)
nbhood <- FROM_GeoJson("../data/neighborhood.geojson")
install.packages("geojsonio")
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/lib/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/lib/pol')
nbhood <- FROM_GeoJson("../../data/neighborhood.geojson")
getwd()
nbhood <- FROM_GeoJson("../data/neighborhood.geojson")
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/lib/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/lib/pol')
rm(list = "nbhood")
nbhood <- rgdal::readOGR("../../data/neighborhood.geojson", "OGRGeoJSON")
nbhood <- rgdal::readOGR("../data/neighborhood.geojson", "OGRGeoJSON")
install.packages("geojson")
library(geojsonio)
install.packages("rgeos")
library(geojsonio)
library(geojsonio)
nbhood <- geojsonio::geojson_read("../data/neighborhood.geojson", method = "local",
what = "sp")
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/lib/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/lib/pol')
leaflet(nbhood) %>%
addTiles() %>%
addPolygons()
leaflet(nbhood) %>%
addTiles() %>%
addPolygons(stroke = F, smoothFactor = 0.3, fillOpacity = 1)
leaflet(nbhood) %>%
addTiles() %>%
addPolygons(stroke = F, smoothFactor = 0.3, fillOpacity = 0.3)
leaflet(nbhood) %>%
addTiles() %>%
addPolygons(stroke = T, weight = 1, smoothFactor = 0.3, fillOpacity = 0.3)
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/lib/pol')
runApp()
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/lib/pol')
runApp('~/Desktop/GitHub/fall2019-proj2--sec1-grp2/lib/pol')
library(maptools)
nb <- readShapePoly("../data/neighborhood.geojson")
nb <- readShapePoly("../data/nbhood/geo_export_63264cca-db33-43e7-ac15-9019c83788c0.shp")
View(nb)
View(nbhood)
nb <- readShapePoly("../data/nbhood/nbhood.shp")
nb <- readShapePoly("../data/nbhood/geo_export_63264cca-db33-43e7-ac15-9019c83788c0.shp")
nb <- readShapePoly("../data/nbhood/geo_export_63264cca-db33-43e7-ac15-9019c83788c0.shp")
nb <- readShapePoly("../data/nbhood/geo_export_63264cca-db33-43e7-ac15-9019c83788c0.shp")
nbhood <- readShapePoly("../data/nbhood/geo_export_63264cca-db33-43e7-ac15-9019c83788c0.shp")
View(df_2015)
View(nbhood)
install.packages(c("d3heatmap", "heatmaply", "hrbrthemes"))
tree <- readRDS("../data/sample_data_2015.rds")
tree %>%
mutate("ntacode" = "nta")
tree <- readRDS("../data/sample_data_2015.rds")
tree %>%
dplyr::mutate(ntacode = nta)
a <- tree %>%
dplyr::mutate(ntacode = nta) %>%
dplyr::select(-nta)
View(a)
tree <- readRDS("../data/sample_data_2015.rds")
tree <- tree %>%
dplyr::mutate(ntacode = nta) %>%
dplyr::select(-nta)
combined <- geo_join(nbhood, tree)
combined <- geo_join(nbhood, tree, by_sp = "ntacode", by_df = "nta")
leaflet(combined) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = NYC_coord["lat"], lng = NYC_coord["lon"], zoom = 10) %>%
NYC_coord <- c(lon = -74.00597, lat = 40.71278)
leaflet(combined) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = NYC_coord["lat"], lng = NYC_coord["lon"], zoom = 10)
NYC_coord <- c(lon = -74.00597, lat = 40.71278)
leaflet(combined) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = NYC_coord["lat"], lng = NYC_coord["lon"], zoom = 10) %>%
addPolygons()
View(combined)
tree <- readRDS("../data/sample_data_2015.rds")
View(tree)
tree$nta
nbhood$ntacode
tree$nta <- as.factor(tree$nta)
combined <- geo_join(nbhood, tree, by_sp = "ntacode", by_df = "nta")
View(combined)
NYC_coord <- c(lon = -74.00597, lat = 40.71278)
leaflet(combined) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = NYC_coord["lat"], lng = NYC_coord["lon"], zoom = 10) %>%
addPolygons()
combined@data[["ntacode"]]
?count
tree <- readRDS("../data/sample_data_2015.rds")
tree$nta <- factor(tree$nta, levels = nbhood@data$ntacode)
View(tree)
tree$nta
?count
tree_count <- count(tree, group_by(ntacode))
tree_count <- tree %>%
group_by(ntacode) %>%
tally()
tree_count <- tree %>%
group_by(nta) %>%
tally()
View(tree_count)
tree <- readRDS("../data/sample_data_2015.rds")
tree$nta <- factor(tree$nta, levels = nbhood@data$ntacode)
tree_count <- tree %>%
group_by(nta, .drop = F) %>%
tally()
View(tree_count)
combined <- geo_join(nbhood, tree_count, by_sp = "ntacode", by_df = "nta")
View(combined)
table(tree_count$n)
pal <- colorNumeric(palette = colorRampPalette(c("#CCFFCC", "006600"))(5),
domain = tree_count$n)
View(pal)
pal(tree_count$n)
colorRampPalette(c("#CCFFCC", "006600"))(5)
library(RColorBrewer)
colorRampPalette(c("lightgreen", "darkgreen"))(5)
pal <- colorBin(colorRampPalette(c("lightgreen", "darkgreen"))(5),
bins = seq(0, 50, by = 10))
View(pal)
pal(5)
pal(0)
pal <- colorBin(colorRampPalette(c("lightgreen", "darkgreen"))(5),
bins = c(-1, seq(0, 50, by = 10)))
pal(4)
pal(0)
pal(-1)
pal <- colorBin(colorRampPalette(c("lightgreen", "darkgreen"))(5),
bins = c(0, 1, seq(10, 50, by = 10)))
pal(0)
pal(1)
pal <- colorBin(c("gray", colorRampPalette(c("lightgreen", "darkgreen"))(5)),
bins = c(0, 1, seq(10, 50, by = 10)))
pal(1)
pal(0)
NYC_coord <- c(lon = -74.00597, lat = 40.71278)
pal <- colorBin(c("gray", colorRampPalette(c("lightgreen", "darkgreen"))(5)),
bins = c(0, 1, seq(10, 50, by = 10)))
leaflet(combined) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = NYC_coord["lat"], lng = NYC_coord["lon"], zoom = 10) %>%
addPolygons(fillColor = ~pal(n))
NYC_coord <- c(lon = -74.00597, lat = 40.71278)
pal <- colorBin(c("gray", colorRampPalette(c("lightgreen", "darkgreen"))(5)),
bins = c(0, 1, seq(10, 50, by = 10)))
leaflet(combined) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = NYC_coord["lat"], lng = NYC_coord["lon"], zoom = 10) %>%
addPolygons(fillColor = ~pal(n), color = "black", weight = 1)
display.brewer.pal(6, pal)
display.brewer.pal(6, c("gray", colorRampPalette(c("lightgreen", "darkgreen"))(5))
)
display.brewer.pal(6, colorRampPalette(c("lightgreen", "darkgreen"))(5))
filled.contour(volcano,
color.palette =
colorRampPalette(c("lightgreen", "darkgreen"))(5)),
filled.contour(volcano,
color.palette =
colorRampPalette(c("lightgreen", "darkgreen"))(5),
asp = 1)
library(graphics)
filled.contour(volcano,
color.palette =
colorRampPalette(c("lightgreen", "darkgreen"))(5),
asp = 1)
filled.contour(volcano,
color.palette = colorRampPalette(c("lightgreen", "darkgreen"))(5), asp = 1)
pal(66)
pal(50)
pal(49)
pal(40)
pal(39)
leaflet(combined) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = NYC_coord["lat"], lng = NYC_coord["lon"], zoom = 10) %>%
addPolygons(fillColor = ~pal(n), color = "black", weight = 1)
leaflet(combined) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = NYC_coord["lat"], lng = NYC_coord["lon"], zoom = 10) %>%
addPolygons(fillColor = ~pal(n), color = "black", weight = 1, fillOpacity = 0.9)
leaflet(combined) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(lat = NYC_coord["lat"], lng = NYC_coord["lon"], zoom = 10) %>%
addPolygons(fillColor = ~pal(n), color = "black", weight = 1, fillOpacity = 0.8)
